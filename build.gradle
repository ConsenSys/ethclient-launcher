/*
 * Copyright ConsenSys AG.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */


plugins {
  // Apply the java-library plugin to add support for Java Library
  id 'java-library'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'com.diffplug.gradle.spotless' version '3.25.0'
  id "org.sonarqube" version "3.0"
  id 'jacoco'
  id 'com.jfrog.bintray' version '1.8.4'
  id "maven-publish"
}

group = 'net.consensys.services'
version = '1.0.0'
sourceCompatibility = '11'

apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'io.spring.dependency-management'
apply from: "${rootDir}/gradle/versions.gradle"
apply plugin: 'com.jfrog.bintray'

sonarqube {
  properties {
    property "sonar.projectKey", "ConsenSys_ethclient-launcher"
    property "sonar.organization", "consensys"
    property "sonar.host.url", "https://sonarcloud.io"
    property 'sonar.exclusions', "*Test"
  }
}

tasks['sonarqube'].dependsOn test

jacocoTestReport {
  reports {
    xml.enabled true
  }
}


test.finalizedBy jacocoTestReport

spotless {
  java {
    // This path needs to be relative to each project
    target fileTree('.') {
      include '**/src/*/java/**/*.java'
      exclude '**/.gradle/**'
    }
    removeUnusedImports()
    googleJavaFormat('1.7')
    importOrder 'java', ''
    trimTrailingWhitespace()
    endWithNewline()
  }
  groovyGradle {
    target '*.gradle'
    greclipse().configFile(rootProject.file('gradle/formatter.properties'))
    endWithNewline()
    paddedCell()
  }

  // Below this line are currently only license header tasks
  format 'groovy', { target '**/src/*/grovy/**/*.groovy' }
}


repositories {
  jcenter()
  mavenCentral()
  mavenLocal()
}

dependencies {


  implementation 'com.google.guava:guava'

  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  implementation 'info.picocli:picocli'
  implementation 'de.codeshelf.consoleui:consoleui'
  implementation 'org.apache.commons:commons-lang3'
  implementation "org.immutables:value-annotations"

  annotationProcessor "org.immutables:value"

  // Use JUnit test framework
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'junit:junit'
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

def pomConfig = {
  licenses {
    license {
      name "The Apache Software License, Version 2.0"
      url "http://www.apache.org/licenses/LICENSE-2.0.txt"
      distribution "repo"
    }
  }

  scm {
    url "https://github.com/ConsenSys/quorum-mainnet-launcher"
  }
}

publishing {
  publications {
    mavenPublication(MavenPublication) {
      from components.java
      artifact sourcesJar {
        classifier "sources"
      }
      versionMapping {
        usage('java-api') {
          fromResolutionOf('runtimeClasspath')
        }
        usage('java-runtime') {
          fromResolutionResult()
        }
      }
      artifactId 'quorum-mainnet-launcher'
      pom.withXml {
        def root = asNode()
        root.appendNode('description', 'Quorum mainnet client configuration generator')
        root.appendNode('name', 'quorum-mainnet-launcher')
        root.appendNode('url', 'https://github.com/ConsenSys/quorum-mainnet-launcher')
        root.children().last() + pomConfig
      }
    }
  }
}

def bintrayUser = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
def bintrayKey = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
def bintrayPackage = bintray.pkg {
  repo = 'consensys'
  name = 'quorum-mainnet-launcher'
  userOrg = 'consensys'
  desc = "Quorum mainnet client configuration generator"
  licenses = ['Apache-2.0']
  websiteUrl = 'https://github.com/ConsenSys/quorum-mainnet-launcher'
  issueTrackerUrl = 'https://github.com/ConsenSys/quorum-mainnet-launcher/issues'
  vcsUrl = 'https://github.com/ConsenSys/quorum-mainnet-launcher.git'
  version {
    name = project.version
    released = new Date()
  }
}

bintray {
  user = bintrayUser
  key = bintrayKey
  publications = ['mavenPublication']
  override = true
  publish = true

  pkg = bintrayPackage
}

bintrayUpload.dependsOn assemble
apply plugin: 'groovy'
